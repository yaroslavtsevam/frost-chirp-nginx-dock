services:
  reverse-proxy:
    image: nginx:${NGINX_VERSION:?NGINX_VERSION not set}
    container_name: reverse_proxy
    depends_on:
        - weather-report
        - temperature-service
        - precip-service
    volumes:
      - ./reverse_proxy/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80

  postgres:
    image: "kartoza/postgis:${POSTGRES_DB_VERSION:?POSTGRES_DB_VERSION not set}"
    ports:
     - 5432:5432
    networks:
     - net
    shm_size: '1gb'
    environment:
      POSTGRES_DB: "${POSTGRES_DB_NAME:?POSTGRES_DB_NAME not set}"
      POSTGRES_USER: "${POSTGRES_DB_USER:?POSTGRES_DB_USER not set}"
      POSTGRES_PASSWORD: "${POSTGRES_DB_PASSWORD:?POSTGRES_DB_PASSWORD not set}"
      POSTGRES_PASS: "${POSTGRES_DB_PASSWORD:?POSTGRES_DB_PASSWORD not set}"
      POSTGRES_MULTIPLE_EXTENSIONS: "${POSTGRES_DB_EXTENSIONS:?POSTGRES_DB_EXTENSIONS not set}"
      RUN_AS_ROOT: "true"
    volumes:
      - postgresqldata:/var/lib/postgresql/data
      - dbbackups:/backups
      - ./configuration/postgresql/initdb:/docker-entrypoint-initdb.d
      #- ./database/postgres/docker-entrypoint-initdb:/docker-entrypoint-initdb.d/
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_DB_USER:?POSTGRES_DB_USER not set} -d ${POSTGRES_DB_NAME:?POSTGRES_DB_NAME not set}"]
      #test: "pg_isready -h db"
      interval: 10s
      timeout: 5s
      retries: 5

# DB backup scipt from cartooza -------------------------------------------
  dbbackups:
    image: "kartoza/pg-backup:${POSTGRES_DB_VERSION:?POSTGRES_DB_VERSION not set}"
    volumes:
      - dbbackups:/backups
    networks:
     - net
    environment:
      DUMPPREFIX: FROST
      POSTGRES_HOST: "${POSTGRES_DB_NAME:?POSTGRES_DB_NAME not set}"
      POSTGRES_USER: "${POSTGRES_DB_USER:?POSTGRES_DB_USER not set}"
      POSTGRES_PASS: "${POSTGRES_DB_PASSWORD:?POSTGRES_DB_PASSWORD not set}"
      POSTGRES_PORT: 5432
      RUN_AS_ROOT: true
      CRON_SCHEDULE: "30 3 */1 * *"
        #- DB_DUMP_ENCRYPTION=true
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  frost:
    image: fraunhoferiosb/frost-server:${FROST_VERSION:?FROST_VERSION not set}
    container_name: frost
    ports:
      - 1884:1884
      - 8080:8080
    networks:
     - net
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", 'bash', '-c', 'curl -f "http://127.0.0.1:8080/FROST-Server/"']
      interval: 10s
      timeout: 5s
      retries: 20
    environment:
      serviceRootUrl: "https://${DOMAIN:?DOMAIN not set}${FROST_SUBPATH:?FROST_SUBPATH not set}"
      persistence_db_driver: "org.postgresql.Driver"
      persistence_db_url: "jdbc:postgresql://postgres:5432/${POSTGRES_DB_NAME:?POSTGRES_DB_NAME not set}"
      persistence_db_username: "${POSTGRES_DB_USER:?POSTGRES_DB_USER not set}"
      persistence_db_password: "${POSTGRES_DB_PASSWORD:?POSTGRES_DB_PASSWORD not set}"
      mqtt_host: ${DOMAIN:?DOMAIN not set}
      # Uncomment this to enable BasicAuth
      # https://fraunhoferiosb.github.io/FROST-Server/settings/auth.html
      # auth_provider: "de.fraunhofer.iosb.ilt.frostserver.auth.basic.BasicAuthProvider"
      # auth_db_driver: "org.postgresql.Driver"
      # auth_db_url: "jdbc:postgresql://frost-db:5432/${FROST_DB_NAME:?FROST_DB_NAME not set}"
      # auth_db_username: "${FROST_DB_USER:?FROST_DB_USER not set}"
      # auth_db_password: "${FROST_DB_PASSWORD:?FROST_DB_PASSWORD not set}"
      # auth_autoUpdateDatabase: "true"
    env_file:
      - frost.env

  chirpstack:
    image: chirpstack/chirpstack:4
    networks:
     - net
    command: -c /etc/chirpstack
    restart: unless-stopped
    volumes:
      - ./configuration/chirpstack:/etc/chirpstack
      - ./lorawan-devices:/opt/lorawan-devices
    depends_on:
      - postgres
      - mosquitto
      - redis
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - REDIS_HOST=redis
      - POSTGRESQL_HOST=postgres
    ports:
      - 8100:8100

  chirpstack-gateway-bridge:
    image: chirpstack/chirpstack-gateway-bridge:4
    restart: unless-stopped
    ports:
      - 1700:1700/udp
    networks:
     - net
    volumes:
      - ./configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
    environment:
      - INTEGRATION__MQTT__EVENT_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/event/{{ .EventType }}
      - INTEGRATION__MQTT__STATE_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/state/{{ .StateType }}
      - INTEGRATION__MQTT__COMMAND_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/command/#
    depends_on:
      - mosquitto
  
  chirpstack-gateway-bridge-basicstation:
    image: chirpstack/chirpstack-gateway-bridge:4
    restart: unless-stopped
    command: -c /etc/chirpstack-gateway-bridge/chirpstack-gateway-bridge-basicstation-eu868.toml
    ports:
      - 3001:3001
    networks:
     - net
    volumes:
      - ./configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
    depends_on:
      - mosquitto

  chirpstack-rest-api:
    image: chirpstack/chirpstack-rest-api:4
    restart: unless-stopped
    command: --server chirpstack:8080 --bind 0.0.0.0:8090 --insecure
    ports:
      - 8090:8090
    networks:
     - net
    depends_on:
      - chirpstack

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
     - net
    command: redis-server --save 300 1 --save 60 100 --appendonly no
    volumes:
      - redisdata:/data

  mosquitto:
    image: eclipse-mosquitto:2
    restart: unless-stopped
    ports:
      - 1883:1883
    networks:
     - net
    volumes: 
      - ./configuration/mosquitto/config/:/mosquitto/config/

  node-red:
    image: nodered/node-red:latest
    environment:
      - TZ=Europe/Moscow
    ports:
      - "1880:1880"
    networks:
     - net
    volumes:
      - nodereddata:/data

volumes:
  postgresqldata:
  nodereddata:
  redisdata:
  dbbackups:

networks:
  net:
    driver: bridge

  #  postgres:
#    image: kartoza/postgis:16-3.4
#    restart: unless-stopped
#    volumes:
#      - ./configuration/postgresql/initdb:/docker-entrypoint-initdb.d
#      - postgresqldata:/var/lib/postgresql/data
#    environment:
#      - POSTGRES_PASSWORD=root




#  frost:
#    image: fraunhoferiosb/frost-server:2.4
#    environment:
#      - serviceRootUrl=http://192.168.1.1:8080/FROST-Server
#      - http_cors_enable=true
#      - http_cors_allowed.origins=*
#      - bus_busImplementationClass=de.fraunhofer.iosb.ilt.sta.messagebus.InternalMessageBus
#      - persistence_db_driver=org.postgres.Driver
#      - persistence_db_url=jdbc:postgres://postgres:5432/sensorthings
#      - persistence_db_username=frost
#      - persistence_db_password=frost
#      - persistence_autoUpdateDatabase=true
#    ports:
#      - 8080:8080
#    depends_on:
#      - postgres